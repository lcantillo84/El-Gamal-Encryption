{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/tooltip\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\n\nfunction ElGamalComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Is prime number\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ElGamalComponent_span_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 63);\n    i0.ɵɵtext(1, \"Please enter a prime number\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ElGamalComponent_div_60_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 64);\n    i0.ɵɵtext(1, \" You have no messages. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ElGamalComponent_div_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 65)(1, \"div\", 66);\n    i0.ɵɵtext(2, \"You received a message from Bob. \");\n    i0.ɵɵelementStart(3, \"button\", 67);\n    i0.ɵɵtext(4, \"Decrypt\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 68)(6, \"strong\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\"Bob's decrypted message: \", ctx_r3.message, \"\");\n  }\n}\n\nfunction ElGamalComponent_div_63_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 69)(1, \"p\");\n    i0.ɵɵtext(2, \" Message is decrypted using \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\")(4, \"strong\");\n    i0.ɵɵtext(5, \"s=(c1 ^ p-1-x) mod p\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"p\")(7, \"strong\");\n    i0.ɵɵtext(8, \"m=(c2 * s) mod p\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(9, \"p\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ElGamalComponent_span_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 70)(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" - \");\n    i0.ɵɵelementStart(4, \"strong\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" - \");\n    i0.ɵɵelementStart(7, \"strong\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"p:\", ctx_r5.primeNumber, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"g:\", ctx_r5.alpha, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"h:\", ctx_r5.h, \"\");\n  }\n}\n\nfunction ElGamalComponent_span_75_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 70)(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" - \");\n    i0.ɵɵelementStart(4, \"strong\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"c1:\", ctx_r6.gama, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"c2:\", ctx_r6.delta, \"\");\n  }\n}\n\nexport let ElGamalComponent = /*#__PURE__*/(() => {\n  class ElGamalComponent {\n    constructor() {\n      this.a = 0;\n      this.primeNumber = 0;\n      this.isPrimeNumber = true;\n      this.alpha = 0;\n      this.randomNumber = 0;\n      this.alpahpowofA = 0;\n      this.findX = 0;\n      this.message = 0;\n      this.randomKeyA = 0;\n      this.randomKeyB = 0;\n      this.h = 0;\n      this.isKeyGenerated = false;\n      this.gama = 0;\n      this.delta = 0;\n      this.messageBob = false;\n    }\n\n    ngOnInit() {\n      this.isKeyGenerated = false;\n    }\n\n    gcd_two_numbers(x, y) {\n      if (typeof x !== 'number' || typeof y !== 'number') return false;\n      x = Math.abs(x);\n      y = Math.abs(y);\n\n      while (y) {\n        var t = y;\n        y = x % y;\n        x = t;\n      }\n\n      return x;\n    }\n\n    isPrime(num) {\n      this.isKeyGenerated = false;\n      var sqrtnum = Math.floor(Math.sqrt(num)); // var prime = num != 1;\n\n      for (var i = 2; i < sqrtnum + 1; i++) {\n        // sqrtnum+1\n        if (num % i == 0) {\n          return this.isPrimeNumber = false;\n          break;\n        }\n      }\n\n      this.primeNumber = num;\n      return this.isPrimeNumber = true;\n    }\n\n    countPrimitiveRoots(p) {\n      var o = 1;\n      var k;\n      var roots = [];\n      var z = 0;\n\n      for (var r = 2; r < p; r++) {\n        k = Math.pow(r, o);\n        k %= p;\n\n        while (k > 1) {\n          o++;\n          k *= r;\n          k %= p;\n        }\n\n        if (o == p - 1) {\n          roots[z] = r;\n          z++;\n        }\n\n        o = 1;\n      }\n\n      console.log(this.alpha = roots[0]); // primitive root generator roots[0]\n\n      return this.alpha = roots[0];\n    } // this code generate the private key for Alice  Bob\n\n\n    getRandomIntAlice(generator, p) {\n      var min = Math.ceil(generator);\n      var max = Math.floor(p);\n      return this.randomKeyA = this.randomNumber = Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    } // this code generate the private key for  Bob\n\n\n    getRandomIntBob(generator, p) {\n      var min = Math.ceil(generator);\n      var max = Math.floor(p);\n      return this.randomKeyB = this.randomNumber = Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    } // using square& multiply algorithm\n\n\n    expmod(base, exp, mod) {\n      if (exp == 0) return 1;\n\n      if (exp % 2 == 0) {\n        this.isKeyGenerated = true;\n        return this.h = Math.pow(this.expmod(base, exp / 2, mod), 2) % mod;\n      } else {\n        this.isKeyGenerated = true;\n        return this.h = base * this.expmod(base, exp - 1, mod) % mod; // return this.alpahpowofA=(base * (this.expmod(base, (exp - 1), mod))) % mod;\n      }\n    }\n\n    encryptSend() {\n      this.gama = this.expmod(this.alpha, this.randomKeyB, this.primeNumber);\n      this.delta = this.expmod(this.h, this.randomKeyB, this.primeNumber) * this.message % this.primeNumber;\n      console.log(this.gama);\n\n      if (this.gama > 1 && this.delta > 1) {\n        this.messageBob = true;\n      }\n    }\n\n  }\n\n  ElGamalComponent.ɵfac = function ElGamalComponent_Factory(t) {\n    return new (t || ElGamalComponent)();\n  };\n\n  ElGamalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ElGamalComponent,\n    selectors: [[\"app-el-gamal\"]],\n    decls: 110,\n    vars: 12,\n    consts: [[\"content\", \"text/html; charset=UTF-8\", \"http-equiv\", \"content-type\"], [\"name\", \"description\", \"content\", \"A online ElGamal encryption/decryption tool. This tool will help you understand how ElGamal encryption works.\"], [\"rel\", \"canonical\", \"href\", \"https://www.debjitbiswas.com/elgamal/\"], [\"type\", \"text/css\", \"rel\", \"stylesheet\", \"href\", \"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css\"], [\"rel\", \"stylesheet\", \"href\", \"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css\"], [1, \"navbar\", \"navbar-expand-lg\", \"navbar-dark\", \"bg-dark\"], [\"href\", \"#\", 1, \"navbar-brand\", \"text-center\"], [\"type\", \"button\", \"data-toggle\", \"collapse\", \"data-target\", \"#navbarNav\", \"aria-controls\", \"navbarNav\", \"aria-expanded\", \"false\", \"aria-label\", \"Toggle navigation\", 1, \"navbar-toggler\"], [1, \"navbar-toggler-icon\"], [\"id\", \"wrapper\", 1, \"container\", \"clearfix\", 2, \"padding-top\", \"80px\"], [1, \"row\"], [1, \"col-md-4\"], [\"id\", \"aliceMachine\", 1, \"panel\", \"panel-default\", \"machine\", \"clearfix\"], [1, \"panel-heading\"], [1, \"panel-title\"], [1, \"panel-body\", \"main\"], [1, \"errors\"], [\"id\", \"prime\", 1, \"form-group\"], [\"for\", \"txtPrime\", \"matTooltip\", \"Enter a prime number\"], [1, \"input-group\"], [\"type\", \"text\", \"id\", \"txtPrime\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"input-group-btn\"], [\"type\", \"button\", \"matTooltip\", \"Enter a prime number\", \"matTooltipPosition\", \"right\", 1, \"btn\", \"btn-default\", \"helpers\", 3, \"click\"], [4, \"ngIf\"], [\"class\", \"errorInfo\", 4, \"ngIf\"], [\"id\", \"generator\", 1, \"form-group\"], [\"for\", \"txtG\", \"matTooltip\", \"Primitive root of p will be a number such that when x goes from 1 to p-1 then g^x (mod p) goes through all the numbers in the set [1, 2,...,(p-1)] in some order\", \"matTooltipPosition\", \"right\"], [1, \"glyphicon\", \"glyphicon-info-sign\"], [\"id\", \"generatorInfo\"], [1, \"btn\", \"btn-xs\", \"btn-default\", 3, \"click\"], [\"id\", \"selectG\"], [\"id\", \"privateKey\", 1, \"form-group\"], [\"for\", \"txtPrivateKey\", \"matTooltip\", \"A number greater than 0 and less than p - 1\", \"matTooltipPosition\", \"right\"], [\"title\", \"\", 1, \"glyphicon\", \"glyphicon-info-sign\"], [\"type\", \"text\", \"id\", \"txtPrivateKey\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"getRandomPrivateKey\", 1, \"btn\", \"btn-default\", \"helpers\", 3, \"click\"], [\"id\", \"getPublicKey\", 1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"glyphicon\", \"glyphicon-arrow-right\"], [1, \"panel\", \"panel-default\", 2, \"margin-top\", \"10px\"], [1, \"panel-body\"], [\"id\", \"messageDisplay\"], [\"class\", \"inbox-empty\", 4, \"ngIf\"], [\"class\", \"inbox-has-message\", 4, \"ngIf\"], [\"class\", \"panel-body text-center\", 4, \"ngIf\"], [1, \"extrainfo\"], [\"id\", \"wire\"], [1, \"wire-data\"], [\"id\", \"keyDisplay\", 1, \"display\"], [\"class\", \"data\", 4, \"ngIf\"], [\"id\", \"encryptedMsg\", 1, \"display\"], [\"id\", \"bobMachine\", 1, \"panel\", \"panel-default\", \"machine\", \"clearfix\"], [\"id\", \"encryptPrivate\", 1, \"form-group\"], [\"for\", \"txtEncryptPrivate\", \"matTooltip\", \"Should be greater than or equal to 0 and less than p - 1.\", \"matTooltipPosition\", \"right\"], [\"type\", \"text\", \"id\", \"txtEncryptPrivate\", \"name\", \"randomkeyB\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"id\", \"getRandomEncyptKey\", 1, \"btn\", \"btn-default\", \"helpers\", 3, \"click\"], [\"id\", \"message\", 1, \"form-group\"], [\"for\", \"txtMessage\", \"matTooltip\", \"Should be number greater than 0 and less than or equal to p.\"], [\"type\", \"text\", \"id\", \"txtMessage\", \"name\", \"message\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"col-12\"], [\"id\", \"encrypt\", 1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"glyphicon\", \"glyphicon-arrow-left\"], [1, \"footer\", \"clearfix\"], [1, \"pull-left\"], [1, \"errorInfo\"], [1, \"inbox-empty\"], [1, \"inbox-has-message\"], [1, \"col-12\", \"text-center\"], [\"id\", \"decrypt\", \"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-sm\", \"mt-2\"], [1, \"data\", 2, \"font-weight\", \"bold\", \"margin-top\", \"10px\"], [1, \"panel-body\", \"text-center\"], [1, \"data\"]],\n    template: function ElGamalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"html\")(1, \"head\");\n        i0.ɵɵelement(2, \"meta\", 0)(3, \"meta\", 1);\n        i0.ɵɵelementStart(4, \"title\");\n        i0.ɵɵtext(5, \"ElGamal Encryption Playground\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"link\", 2)(7, \"link\", 3)(8, \"link\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"body\")(10, \"nav\", 5)(11, \"a\", 6);\n        i0.ɵɵtext(12, \"ElGamal Encryption\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 7);\n        i0.ɵɵelement(14, \"span\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 9)(16, \"div\", 10)(17, \"div\", 11)(18, \"div\", 12)(19, \"div\", 13)(20, \"h3\", 14);\n        i0.ɵɵtext(21, \"Alice's Machine\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"div\", 15);\n        i0.ɵɵelement(23, \"ul\", 16);\n        i0.ɵɵelementStart(24, \"div\", 17)(25, \"label\", 18);\n        i0.ɵɵtext(26, \" Enter a prime : (p) \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 19)(28, \"input\", 20);\n        i0.ɵɵlistener(\"ngModelChange\", function ElGamalComponent_Template_input_ngModelChange_28_listener($event) {\n          return ctx.primeNumber = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"div\", 21)(30, \"button\", 22);\n        i0.ɵɵlistener(\"click\", function ElGamalComponent_Template_button_click_30_listener() {\n          return ctx.isPrime(ctx.primeNumber);\n        });\n        i0.ɵɵtext(31, \"Check if is prime\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(32, ElGamalComponent_span_32_Template, 2, 0, \"span\", 23);\n        i0.ɵɵtemplate(33, ElGamalComponent_span_33_Template, 2, 0, \"span\", 24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"div\", 25)(35, \"label\", 26);\n        i0.ɵɵtext(36, \" Choose (g) \");\n        i0.ɵɵelement(37, \"span\", 27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"div\", 28)(39, \"button\", 29);\n        i0.ɵɵlistener(\"click\", function ElGamalComponent_Template_button_click_39_listener() {\n          return ctx.countPrimitiveRoots(ctx.primeNumber);\n        });\n        i0.ɵɵtext(40, \"Find Generator\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(41, \"div\", 30);\n        i0.ɵɵtext(42);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(43, \"div\", 31)(44, \"label\", 32);\n        i0.ɵɵtext(45, \" Enter Private Key (x) \");\n        i0.ɵɵelement(46, \"span\", 33);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"div\", 19)(48, \"input\", 34);\n        i0.ɵɵlistener(\"ngModelChange\", function ElGamalComponent_Template_input_ngModelChange_48_listener($event) {\n          return ctx.randomKeyA = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(49, \"div\", 21)(50, \"button\", 35);\n        i0.ɵɵlistener(\"click\", function ElGamalComponent_Template_button_click_50_listener() {\n          return ctx.getRandomIntAlice(ctx.alpha, ctx.primeNumber);\n        });\n        i0.ɵɵtext(51, \"Get Random Key\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(52, \"p\");\n        i0.ɵɵtext(53, \"(h) is calculated as (h = g^x mod p)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(54, \"button\", 36);\n        i0.ɵɵlistener(\"click\", function ElGamalComponent_Template_button_click_54_listener() {\n          return ctx.expmod(ctx.alpha, ctx.randomKeyA, ctx.primeNumber);\n        });\n        i0.ɵɵtext(55, \" Generate & Publish Public Key \\u00A0\");\n        i0.ɵɵelement(56, \"span\", 37);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"div\", 38)(58, \"div\", 39)(59, \"div\", 40);\n        i0.ɵɵtemplate(60, ElGamalComponent_div_60_Template, 2, 0, \"div\", 41);\n        i0.ɵɵtemplate(61, ElGamalComponent_div_61_Template, 8, 1, \"div\", 42);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(62, \"div\", 38);\n        i0.ɵɵtemplate(63, ElGamalComponent_div_63_Template, 10, 0, \"div\", 43);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(64, \"div\", 44);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(65, \"div\", 11)(66, \"div\", 45)(67, \"div\", 46)(68, \"div\", 47);\n        i0.ɵɵtext(69, \" Alice's Public Key\");\n        i0.ɵɵelement(70, \"br\");\n        i0.ɵɵtemplate(71, ElGamalComponent_span_71_Template, 9, 3, \"span\", 48);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(72, \"div\", 49);\n        i0.ɵɵtext(73, \" Bob's encrypted message\");\n        i0.ɵɵelement(74, \"br\");\n        i0.ɵɵtemplate(75, ElGamalComponent_span_75_Template, 6, 2, \"span\", 48);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(76, \"div\", 11)(77, \"div\", 50)(78, \"div\", 13)(79, \"h3\", 14);\n        i0.ɵɵtext(80, \"Bob's Machine\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(81, \"div\", 15)(82, \"form\")(83, \"div\", 51)(84, \"label\", 52);\n        i0.ɵɵtext(85, \" Private Key for Encryption (r) \");\n        i0.ɵɵelement(86, \"span\", 27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(87, \"div\", 19)(88, \"input\", 53);\n        i0.ɵɵlistener(\"ngModelChange\", function ElGamalComponent_Template_input_ngModelChange_88_listener($event) {\n          return ctx.randomKeyB = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(89, \"div\", 21)(90, \"button\", 54);\n        i0.ɵɵlistener(\"click\", function ElGamalComponent_Template_button_click_90_listener() {\n          return ctx.getRandomIntBob(ctx.alpha, ctx.primeNumber);\n        });\n        i0.ɵɵtext(91, \"Get Random Key\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(92, \"div\", 55)(93, \"label\", 56);\n        i0.ɵɵtext(94, \" Message (m) \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(95, \"input\", 57);\n        i0.ɵɵlistener(\"ngModelChange\", function ElGamalComponent_Template_input_ngModelChange_95_listener($event) {\n          return ctx.message = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(96, \"div\", 58)(97, \"p\");\n        i0.ɵɵtext(98, \"Encrypted message is calculated as \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(99, \"p\");\n        i0.ɵɵtext(100, \" (c1, c2) = (g^r mod p, (h^r m) mod p) )\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(101, \"button\", 59);\n        i0.ɵɵlistener(\"click\", function ElGamalComponent_Template_button_click_101_listener() {\n          return ctx.encryptSend();\n        });\n        i0.ɵɵelement(102, \"span\", 60);\n        i0.ɵɵtext(103, \"\\u00A0 Encrypt & Send \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(104, \"div\", 44);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(105, \"div\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(106, \"hr\");\n        i0.ɵɵelementStart(107, \"footer\", 61)(108, \"p\", 62);\n        i0.ɵɵtext(109, \"Copyright \\u00A9 2020 Lilianne Cantillo\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(28);\n        i0.ɵɵproperty(\"ngModel\", ctx.primeNumber);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.isPrimeNumber == true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isPrimeNumber == false);\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate1(\"Your generator is = \", ctx.alpha, \"\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.randomKeyA);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngIf\", !ctx.messageBob);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.messageBob);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.messageBob);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.isKeyGenerated);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.messageBob);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngModel\", ctx.randomKeyB);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.message);\n      }\n    },\n    directives: [i1.MatTooltip, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.NgIf, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm],\n    styles: [\".errorInfo[_ngcontent-%COMP%]{color:#f66}.error[_ngcontent-%COMP%]   .errorInfo[_ngcontent-%COMP%]{display:block}#wire[_ngcontent-%COMP%]{background:url(cloud.a47820b84e934206.png) no-repeat center top;height:245px}.wire-data[_ngcontent-%COMP%]{padding-top:70px;text-align:center}.display[_ngcontent-%COMP%]{width:60%;margin:10px auto 0}#encryptedMsg[_ngcontent-%COMP%]{border-top:1px dashed #AAA;padding-top:8px}.wire-data[_ngcontent-%COMP%]   .data[_ngcontent-%COMP%]{font-weight:700}\"]\n  });\n  return ElGamalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}